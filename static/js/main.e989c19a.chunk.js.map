{"version":3,"sources":["useBoard.js","Game.js","App.js","index.js"],"names":["useBoard","useState","Array","fill","board","setBoard","piece","setPiece","winner","setWinner","countStepToWin","newBoard","positionX","positionY","directionX","directionY","currentPosition","tempX","tempY","stepToWin","handleGameClick","x","y","JSON","parse","stringify","checkWinner","handleRestart","Game","styled","div","Board","BoardRow","BoardSquare","Piece","props","color","Description","Restart","button","array","from","length","game","onClick","map","_","App","className","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.e989c19a.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nexport default function useBoard() {\n  const [board, setBoard] = useState(Array(19).fill(Array(19).fill(null)));\n  const [piece, setPiece] = useState(\"black\");\n  const [winner, setWinner] = useState();\n\n  const countStepToWin = (\n    newBoard,\n    positionX,\n    positionY,\n    directionX,\n    directionY\n  ) => {\n    const currentPosition = newBoard[positionX][positionY];\n    let tempX = positionX;\n    let tempY = positionY;\n    let stepToWin = 0;\n\n    while (stepToWin < 5) {\n      tempX += directionX;\n      tempY += directionY;\n\n      if (tempX < 0 || tempX > 18 || tempY < 0 || tempY > 18) {\n        break;\n      }\n\n      if (newBoard[tempX][tempY] === currentPosition) {\n        stepToWin++;\n      } else {\n        break;\n      }\n    }\n    return stepToWin;\n  };\n\n  const checkWinner = (newBoard, x, y) => {\n    if (\n      countStepToWin(newBoard, x, y, 1, 0) +\n        countStepToWin(newBoard, x, y, -1, 0) >=\n        4 ||\n      countStepToWin(newBoard, x, y, 0, 1) +\n        countStepToWin(newBoard, x, y, 0, -1) >=\n        4 ||\n      countStepToWin(newBoard, x, y, 1, 1) +\n        countStepToWin(newBoard, x, y, -1, -1) >=\n        4 ||\n      countStepToWin(newBoard, x, y, 1, -1) +\n        countStepToWin(newBoard, x, y, -1, 1) >=\n        4\n    ) {\n      setWinner(newBoard[x][y]);\n    }\n  };\n\n  const handleGameClick = (x, y, piece) => () => {\n    const newBoard = JSON.parse(JSON.stringify(board)); // deep copy\n    if (board[x][y] === null && !winner) {\n      newBoard[x][y] = piece;\n    } else {\n      return;\n    }\n    setBoard(newBoard);\n    setPiece(piece === \"black\" ? \"white\" : \"black\");\n    checkWinner(newBoard, x, y);\n  };\n\n  const handleRestart = () => {\n    setBoard(Array(19).fill(Array(19).fill(null)));\n    setPiece(\"black\");\n    setWinner();\n  };\n\n  return {\n    board,\n    piece,\n    winner,\n    handleGameClick,\n    handleRestart\n  };\n}\n","import styled from \"styled-components\";\nimport React from \"react\";\n\nconst Game = styled.div`\n  text-align: center;\n  margin: 10px;\n`;\n\nconst Board = styled.div`\n  margin: 0 auto;\n  background: grey;\n  width: 570px;\n  height: 570px;\n`;\n\nconst BoardRow = styled.div`\n  width: 100%;\n  height: 30px;\n  background: #cd853f;\n  border: 1px solid black;\n  display: flex;\n`;\n\nconst BoardSquare = styled.div`\n  width: 30px;\n  height: 30px;\n  border: 1px solid black;\n`;\n\nconst Piece = styled.div`\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n  background: ${(props) => props.color};\n`;\n\nconst Description = styled.div`\n  font-size: 20px;\n`;\nconst Restart = styled.button`\n  margin: 0px 0px 5px 20px;\n  padding: 5px 10px;\n  background: #ccc;\n  border: 0 none;\n  cursor: pointer;\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n`;\n\nconst array = Array.from({ length: 19 });\n\nexport default function game({\n  board,\n  piece,\n  winner,\n  handleGameClick,\n  handleRestart\n}) {\n  return (\n    <Game>\n      <Description>\n        {winner && `${winner} 贏了`}\n        <Restart onClick={handleRestart}>重新開始</Restart>\n      </Description>\n      <Board>\n        {array.map((_, x) => (\n          <BoardRow key={x}>\n            {array.map((_, y) => (\n              <BoardSquare key={y} onClick={handleGameClick(x, y, piece)}>\n                <Piece color={board[x][y]} />\n              </BoardSquare>\n            ))}\n          </BoardRow>\n        ))}\n      </Board>\n    </Game>\n  );\n}\n","import React from \"react\";\nimport useBoard from \"./useBoard\";\nimport Game from \"./Game\";\nimport \"./styles.css\";\n\nfunction App() {\n  const { board, piece, winner, handleGameClick, handleRestart } = useBoard();\n  return (\n    <div className=\"App\">\n      <Game\n        handleGameClick={handleGameClick}\n        winner={winner}\n        piece={piece}\n        board={board}\n        handleRestart={handleRestart}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}